import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.patches as patches
from sklearn.cluster import KMeans

#data processing
banknote = pd.read_csv('Banknote-authentication-dataset-.csv')
V1 = banknote['V1']
V2 = banknote['V2']
bank_mean = np.mean(banknote)
std_dev = np.std(banknote)
bank_max = np.max(banknote)
bank_min = np.min(banknote)
#normalistation
normed_V1 = (V1 - bank_min[0])/(bank_max[0] - bank_min[0])
normed_V2 = (V2 - bank_min[1])/(bank_max[1] - bank_min[1])
V1_mean = normed_V1.mean()
V2_mean = normed_V2.mean()
V1_std = normed_V1.std()
V2_std = normed_V2.std()
#calculate the standard deviation and using patches library draw an ellipse
ellipse = patches.Ellipse([V1_mean, V2_mean], V1_std*2, V2_std*2, alpha = 0.8)
#picture
fig,graph = plt.subplots()
fig_data = graph.scatter(normed_V1, normed_V2, c="lightblue")
fig_ellipse = graph.add_patch(ellipse)
fig_mean = graph.scatter(V1_mean, V2_mean, s=100 ,c="red")
plt.legend([fig_data, fig_ellipse, fig_mean], ['data', 'ellipse', 'mean'])
plt.title(' Real banknotes VS Counterfeit banknotes')
plt.xlabel('V1')
plt.ylabel('V2')
plt.show()

#k-mean result
V1_V2 = np.column_stack((normed_V1, normed_V2))
km_res = KMeans(n_clusters=2)
km_res.fit_predict(V1_V2)
labels = km_res.labels_
centers = km_res.cluster_centers_
plt.scatter(V1_V2[:,0], V1_V2[:,1], c=labels, cmap='coolwarm')
fig_center = plt.scatter(centers[:,0], centers[:,1], c ='orange', s=2000, alpha = 0.3)
fig_mean = plt.scatter(V1_mean, V2_mean, s=100 ,c="lightblue")
plt.xlabel('V1')
plt.ylabel('V2')
plt.legend([fig_mean], ['mean'])
plt.title('k-mean result')
plt.savefig('figure.png')
plt.show()

#k-mean result
V1_V2 = np.column_stack((normed_V1, normed_V2))
km_res = KMeans(n_clusters=2, random_state=0)
labels = km_res.fit_predict(V1_V2)
#labels = km_res.labels_
centers = km_res.cluster_centers_
plt.scatter(V1_V2[km_res.labels_ == 0, 0], V1_V2[km_res.labels_ == 0, 1],
                c='green', label='genuine')
plt.scatter(V1_V2[km_res.labels_ == 1, 0], V1_V2[km_res.labels_ == 1, 1],
                c='blue', label='fake')
plt.scatter(centers[:,0], centers[:,1], c ='orange', s=300, marker='*', label = 'centroid')
plt.scatter(V1_mean, V2_mean, s=100 ,c="lightblue", label = 'mean')
plt.xlabel('V1')
plt.ylabel('V2')
plt.legend()
plt.title('k-mean result')
plt.savefig('figure.png')
plt.show()
#The results is stable, and both clusters are classified by the mean point.

#Add the column "KMeans" in csv
banknote['KMeans'] = km_res.labels_
banknote.to_csv("Banknote-authentication-dataset-.csv", index=False)
plt.scatter(normed_V1,normed_V2, c=banknote['KMeans'], cmap='coolwarm')
plt.scatter(centers[:,0], centers[:,1], c ='orange', s=300, marker='*', label = 'centroid')
plt.scatter(V1_mean, V2_mean, s=100 ,c="lightblue", label = 'mean')
plt.xlabel('V1')
plt.ylabel('V2')
plt.legend()
plt.title('k-mean result')
plt.savefig('figure.png')
plt.show()
#loop_nine
from sklearn.datasets.samples_generator import (make_blobs,
                                                make_circles,
                                                make_moons)
from sklearn.cluster import KMeans, SpectralClustering

n_iter = 9
fig, ax = plt.subplots(3, 3, figsize=(16, 16))
ax = np.ravel(ax)
centers = []
for i in range(n_iter):
    # Run local implementation of kmeans
    km = KMeans(n_clusters=2,
                max_iter=3)
    labels = km_res.fit_predict(V1_V2)
    centroids = km_res.cluster_centers_
    centers.append(centroids)
    ax[i].scatter(V1_V2[labels == 0, 0], V1_V2[labels == 0, 1],
                   label='cluster 1')
    ax[i].scatter(V1_V2[labels == 1, 0], V1_V2[labels == 1, 1],
                   label='cluster 2')
    ax[i].scatter(centroids[:, 0], centroids[:, 1],
                  c='r', marker='*', s=300, label='centroid')
    ax[i].legend(loc='lower right')
    ax[i].set_aspect('equal')
plt.tight_layout();

#Correct labels result
df = pd.read_csv('data_with_labels.csv')
df_v1 = df['V1']
df_v2 = df['V2']
df_class = df['Class']
df_mean = np.mean(df)
df_std_dev = np.std(df)
df_max = np.max(df)
df_min = np.min(df)
#normalistation
df_normed_v1 = (df_v1 - df_min[0])/(df_max[0] - df_min[0])
df_normed_v2 = (df_v2 - df_min[1])/(df_max[1] - df_min[1])
df_v1_mean = df_normed_v1.mean()
df_v2_mean = df_normed_v2.mean()
df_v1_std = df_normed_v1.std()
df_v2_std = df_normed_v2.std()

df_v1_v2 = np.column_stack((df_normed_v1, df_normed_v2))
scatter = plt.scatter(df_normed_v1, df_normed_v2, c=df_class, cmap='coolwarm')
plt.scatter(centers[:,0], centers[:,1], c="orange", s=300, marker='*')
plt.xlabel('V1')
plt.ylabel('V2')
#plt.legend()
plt.title('correct result')
plt.savefig('figure_correct.png')
plt.show()
